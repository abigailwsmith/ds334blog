{
  "hash": "824e2b107200ed1d23b38f1b5cbde2fa",
  "result": {
    "markdown": "---\ntitle: \"Final Project\"\nsubtitle: \"Blog Post 4\"\nauthor: \"Abigail Smith\"\ndate: \"2024-05-10\"\ncategories: [news, code, analysis]\nimage: \"PitcherSubstancesCrackdown_Getty_Ringer.jpg\"\n---\n\n\n# Introduction\n\nFor the project I am interested in investigating the impact of the sticky stuff scandal on baseball as a whole. I will do so by creating a Shiny App using the StatCast data as well as some attendance and TV viewership data I found online. In looking at the attendance data I am curious to see if there is a noticeable pattern between the trend in attendance and the trends in spin rate. More specifically, I would like to see if attendance increased after the MLB cracked down on sticky substances. My theory is that I will see an increase in attendance following 2021, as generally speaking attendance is higher when the amount of home runs is higher. Take for example, the steroid era in the early 2000s, home runs were at an all time high because so many players were taking steroids, and attendance was extremely high as well. This leads me to believe that something like the sticky stuff scandal would have the opposite effect and harm attendance. I also think a brief glance at some world series tv viewership data I found will be relevant to this same idea. Although in this situation the sample size is smaller, I still think that a trend in world series viewership reflects on the viewership and popularity of baseball in that season as a whole. I would also like to see just how evident the impact of spin rate on batting statistics such as home runs, batting average, and slugging average are. Similarly, I want to see how spin rate impacted other pitching statistics, such as strike out percentage and the number of players hit by pitch. On a simple note, I would like to take a glance at pitching how spin rate has changed over time just to see how evident the direct influence of the sticky stuff scandal is.\n\n# Packages\n\n\n::: {.cell}\n\n:::\n\n\n# Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reading in the pitching data set\npitching_df <- read_csv(here(\"data/pitchingstats.csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 768 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): last_name, first_name\ndbl (17): player_id, year, pa, home_run, k_percent, bb_percent, p_hit_by_pit...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# Reading in each individual attendance data set\nattendance_2018 <- read_csv(here(\"data/2018attendance.csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 30 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Tm, Est. Payroll, Succ%, Managers\ndbl  (9): BatAge, PAge, BPF, PPF, #HOF, #A-S, #a-tA-S, Chall, Succ\nnum  (2): Attendance, Attend/G\ntime (1): Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nattendance_2019 <- read_csv(here(\"data/2019attendance.csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 30 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Tm, Est. Payroll, Succ%, Managers\ndbl  (9): BatAge, PAge, BPF, PPF, #HOF, #A-S, #a-tA-S, Chall, Succ\nnum  (2): Attendance, Attend/G\ntime (1): Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nattendance_2020 <- read_csv(here(\"data/2020attendance.csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 30 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Tm, Est. Payroll, Succ%, Managers\ndbl  (9): BatAge, PAge, BPF, PPF, #HOF, #A-S, #a-tA-S, Chall, Succ\nlgl  (2): Attendance, Attend/G\ntime (1): Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nattendance_2021 <- read_csv(here(\"data/2021attendance.csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 30 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Tm, Est. Payroll, Succ%, Managers\ndbl  (9): BatAge, PAge, BPF, PPF, #HOF, #A-S, #a-tA-S, Chall, Succ\nnum  (2): Attendance, Attend/G\ntime (1): Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nattendance_2022 <- read_csv(here(\"data/2022attendance.csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 30 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Tm, Est. Payroll, Succ%, Managers\ndbl  (9): BatAge, PAge, BPF, PPF, #HOF, #A-S, #a-tA-S, Chall, Succ\nnum  (2): Attendance, Attend/G\ntime (1): Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nattendance_2023 <- read_csv(here(\"data/2023attendance.csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 30 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Tm, Est. Payroll, Succ%, Managers\ndbl  (9): BatAge, PAge, BPF, PPF, #HOF, #A-S, #a-tA-S, Chall, Succ\nnum  (2): Attendance, Attend/G\ntime (1): Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nattendance_2024 <- read_csv(here(\"data/2024attendance.csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 30 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Tm, Est. Payroll, Succ%, Managers\ndbl  (9): BatAge, PAge, BPF, PPF, #HOF, #A-S, #a-tA-S, Chall, Succ\nnum  (2): Attendance, Attend/G\ntime (1): Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# Reading in the world series data set\nworldseriesviewing <- read_csv(here(\"data/world-series-ratings.csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 54 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): network, winning_team, losing_team\ndbl (11): year, average_audience, game_1_audience, game_2_audience, game_3_a...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a year variable in each of the attendance data sets\nattendance_2018$year <- 2018\nattendance_2019$year <- 2019\nattendance_2020$year <- 2020\nattendance_2021$year <- 2021\nattendance_2022$year <- 2022\nattendance_2023$year <- 2023\nattendance_2024$year <- 2024\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create 3 joined data sets of the attendance data sets\nattendance2018_2019 <- full_join(attendance_2018, attendance_2019)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(Tm, Attendance, `Attend/G`, BatAge, PAge, BPF, PPF,\n`#HOF`, `#A-S`, `#a-tA-S`, `Est. Payroll`, Time, Chall, Succ, `Succ%`,\nManagers, year)`\n```\n:::\n\n```{.r .cell-code}\nattendance2020_2021 <- full_join(attendance_2020, attendance_2021)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(Tm, Attendance, `Attend/G`, BatAge, PAge, BPF, PPF,\n`#HOF`, `#A-S`, `#a-tA-S`, `Est. Payroll`, Time, Chall, Succ, `Succ%`,\nManagers, year)`\n```\n:::\n\n```{.r .cell-code}\nattendance2022_2023 <- full_join(attendance_2022, attendance_2023)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(Tm, Attendance, `Attend/G`, BatAge, PAge, BPF, PPF,\n`#HOF`, `#A-S`, `#a-tA-S`, `Est. Payroll`, Time, Chall, Succ, `Succ%`,\nManagers, year)`\n```\n:::\n\n```{.r .cell-code}\n# Join those 3 data sets together into 2 datasets\nattendance2018_2021 <- full_join(attendance2018_2019, attendance2020_2021)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(Tm, Attendance, `Attend/G`, BatAge, PAge, BPF, PPF,\n`#HOF`, `#A-S`, `#a-tA-S`, `Est. Payroll`, Time, Chall, Succ, `Succ%`,\nManagers, year)`\n```\n:::\n\n```{.r .cell-code}\nattendance2022_2024 <- full_join(attendance2022_2023, attendance_2024)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(Tm, Attendance, `Attend/G`, BatAge, PAge, BPF, PPF,\n`#HOF`, `#A-S`, `#a-tA-S`, `Est. Payroll`, Time, Chall, Succ, `Succ%`,\nManagers, year)`\n```\n:::\n\n```{.r .cell-code}\n# Join the last two big data sets in one big complete attendance data set\nattendancefull <- full_join(attendance2018_2021, attendance2022_2024)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(Tm, Attendance, `Attend/G`, BatAge, PAge, BPF, PPF,\n`#HOF`, `#A-S`, `#a-tA-S`, `Est. Payroll`, Time, Chall, Succ, `Succ%`,\nManagers, year)`\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save the attendance data set as a CSV so that I do not lose track of it\nwrite_csv(attendancefull, \"attendancefull.csv\")\n```\n:::\n\n\n# Cleaning and tidying the pitching data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npitching_df <- pitching_df |> rename(pitcher = `last_name, first_name`)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npitching_cleaner <- pitching_df |> pivot_longer(c(\"sl_avg_spin\", \"ch_avg_spin\", \"cu_avg_spin\", \"si_avg_spin\"), names_to = \"pitch_type\", values_to =  \"spin_rate\")\n\npitching_cleaner <- pitching_cleaner |> mutate(pitch_type = str_remove(pitch_type, \"_avg_spin\")) |>  mutate(pitch_type = case_when(pitch_type == \"sl\" ~ \"slider\", pitch_type == \"ch\" ~ \"changeup\", pitch_type == \"cu\" ~ \"curveball\", pitch_type == \"si\" ~ \"sinker\"))  \n\npitching_cleaner <- pitching_cleaner |> select(!c(sl_avg_speed, ch_avg_speed, si_avg_speed, cu_avg_speed, pa, player_id)) \n```\n:::\n\n\n# Cleaning up attendance and tv viewership dataframes\n\nI do not need all of these variables in the data frame so I am going to get rid of some of them\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattendance_smaller <- attendancefull |> select(Tm, Attendance, `Attend/G`, year)\n```\n:::\n\n\nSame deal here with the tv viewership\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntv_views_smaller <- worldseriesviewing |> select(c(year, average_audience)) |> filter(year >= 2018 & year <= 2023)\n```\n:::\n\n\n# Static visualizations for the shiny app\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattendance_smaller_reorder <- attendance_smaller |> mutate(Tm = fct_reorder(Tm, `Attend/G`))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `Tm = fct_reorder(Tm, `Attend/G`)`.\nCaused by warning:\n! `fct_reorder()` removing 33 missing values.\nℹ Use `.na_rm = TRUE` to silence this message.\nℹ Use `.na_rm = FALSE` to preserve NAs.\n```\n:::\n\n```{.r .cell-code}\nggplot(data = attendance_smaller_reorder, aes(x = Tm, y = `Attend/G`)) + geom_col() + coord_flip() + theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 33 rows containing missing values or values outside the scale range\n(`geom_col()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = attendance_smaller, aes(x = year, y = `Attend/G`, colour = Tm)) + geom_line()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 3 rows containing missing values or values outside the scale range\n(`geom_line()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = tv_views_smaller, aes(x = year, y = average_audience)) + geom_col()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pitching_cleaner, aes(x= spin_rate, y = home_run, colour = pitch_type)) + geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 579 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pitching_cleaner, aes(x = spin_rate)) + geom_histogram() + facet_wrap(~year) + theme_minimal() + labs(title = \"Histogram of spin rate facted by year\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 579 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n# Shiny app\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nyear_choices_pitching <- pitching_cleaner |> distinct(year) |> pull(year)\ny_var_choices <- names(pitching_cleaner)[c(3:8)]\npitch_choice <- pitching_cleaner |> distinct(pitch_type) |> pull(pitch_type)\nx_var <- names(attendance_smaller)[c(2, 3)]\nyear_choices_attendance <- attendance_smaller|> distinct(year) |> pull(year)\nui <- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      radioButtons(\"year_sel\", label = \"Choose a year for pitching:\", choices = year_choices_pitching),\n      selectizeInput(\"pitch_sel\", label = \"Choose pitch type:\",\n                     choices = pitching_cleaner$pitch_type, selected = \"slider\",\n                     multiple = TRUE),\n      selectInput(\"y_var_sel\", label = \"Choose a response variable for pitching:\", choices = y_var_choices),\n      radioButtons(\"x_sel\", label = \"Choose an attendance variable:\", choices = x_var),\n      radioButtons(\"year_sel_attendance\", label = \"Choose a year for the attendance:\", choices = year_choices_pitching),\n      selectizeInput(\"tm_sel\", label = \"Choose a team:\", choices = attendance_smaller$Tm, selected = \"Arizona Diamondbacks\", multiple = TRUE)\n    ),\n    mainPanel(\n      tabsetPanel(\n        tabPanel(\"Pitching\", plotOutput(\"scatterplot\"), plotOutput(\"spinhist\"),  dataTableOutput(\"pitching_raw_data\")),\n        tabPanel(\"Attendance\", plotOutput(\"attendance_line\"), plotOutput(\"barplot\"), dataTableOutput(\"attendance_raw_data\")),\n        tabPanel(\"TV Viewership\", plotOutput(\"audience_bar\"), dataTableOutput(\"audience_raw_data\"))\n      )\n    )\n  )\n  \n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The select input \"pitch_sel\" contains a large number of options;\nconsider using server-side selectize for massively improved performance. See\nthe Details section of the ?selectizeInput help topic.\n```\n:::\n\n```{.r .cell-code}\nserver <- function(input, output, session) {\n pitching_reactive <- reactive({\n   pitching1 <- pitching_cleaner |> filter(year == input$year_sel) |> filter(pitch_type %in% input$pitch_sel)\n})\n \noutput$scatterplot <- renderPlot({ggplot(pitching_reactive(), aes(x= spin_rate, y = .data[[input$y_var_sel]], colour = pitch_type)) + geom_point() + theme_minimal() + labs(title = glue::glue(\"Scatterplot of spin rate against\",  input$y_var_sel, \" in \", input$year_sel))})\n\n\noutput$spinhist <- renderPlot({ggplot(data = pitching_cleaner, aes(x = spin_rate)) + geom_histogram() + facet_wrap(~year) + theme_minimal() + labs(title = \"Histogram of spin rate facted by year\")})\n\n  attendance_reactive <- reactive({\n    attendance1 <- attendance_smaller |> filter(year == input$year_sel_attendance) |>  mutate(Tm = fct_reorder(Tm, .data[[input$x_sel]]))\n  })\n  \n   attendancereactive <- reactive({\n   team1 <- attendance_smaller |> filter(Tm %in% input$tm_sel)})\noutput$barplot <- renderPlot({ggplot(attendance_reactive(), aes(x = Tm, y = .data[[input$x_sel]])) + geom_col() + coord_flip() + theme_minimal() + labs(title = glue::glue(\"Barplot of \", input$x_sel, \" in \", input$year_sel_attendance)) })\n\noutput$attendance_line <- renderPlot({ggplot(attendancereactive(), aes(x = year, y = `Attend/G`, colour = Tm)) + geom_line() + theme_minimal() + labs(title = \"Average Attendance per Game Over Time \") })\n\noutput$audience_bar <- renderPlot({ggplot(data = tv_views_smaller, aes(x = year, y = average_audience)) + geom_col() + theme_minimal() + labs(title = \"Average TV Audience per World Series Game In Each Year \") })\n\n\noutput$attendance_raw_data <- renderDataTable({attendance_smaller})\n\noutput$audience_raw_data <- renderDataTable({tv_views_smaller})\n\noutput$pitching_raw_data <- renderDataTable({pitching_cleaner})\n}\n\nshinyApp(ui, server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n\n\n# Findings\n\nWhen playing around with the app, I found that there is some pretty clear difference in the hitting statistics before 2021 as opposed to after. Things like strike out percentage were higher prior to 2021 as opposed to things like opposing home runs which went up after 2021. The impact of the sticky substances is most evident in the faceted histogram of spin rate, it is quite clear that the spin rate was higher previous to 2021. In the attendance graphs as well, there is a considerable increase in both the average and total attendance following 2021. This change is somewhat less evident in the TV viewership bar plot however. What is most evident in all graphs is the 2020 season, this is especially interesting in the line graph which shows a gap during the 2020 season which is because attendance was not allowed during the COVID-19 pandemic. Additionally, the 2020 season was shortened so all statistics for that season will be offset. Another season in the data set that will be strange is the 2024 season since that one had only just begun at the time of me making the app. \n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}